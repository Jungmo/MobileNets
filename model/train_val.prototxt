name: “MobileNet”
layer {
  name: "data"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    mirror: true
    crop_size: 224
    mean_file: "data/ilsvrc12/imagenet_mean.binaryproto"
  }
  data_param {
    source: "examples/imagenet/ilsvrc12_train_lmdb"
    batch_size: 256
    backend: LMDB
  }
}
layer {
  name: "data"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    mirror: false
    crop_size: 224
    mean_file: "data/ilsvrc12/imagenet_mean.binaryproto"
  }
  data_param {
    source: "examples/imagenet/ilsvrc12_val_lmdb"
    batch_size: 50
    backend: LMDB
  }
}

layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 32
    kernel_size: 3
    stride: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "norm1"
  type: "LRN"
  bottom: "conv1"
  top: "norm1"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: “norm1”
  top: "conv1"
}



layer {
  name: "conv2-depthwise”
  type: "Convolution"
  bottom: "relu1"
  top: "conv2-depthwise"
  param {
    lr_mult: 1
    decay_mult: 1
    #block_group_lasso {
    #    xdimen: 9
    #    ydimen: 32
    #    block_decay_mult: 1.0
    #}
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 1
    pad: 0
    kernel_size: 3
    stride: 1
    group: 32
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0.1
    }
  }
}
layer {
  name: "norm2-depthwise"
  type: "LRN"
  bottom: "conv2-depthwise"
  top: "norm2-depthwise"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "relu2-depthwise"
  type: "ReLU"
  bottom: “norm2-depthwise"
  top: "conv2-depthwise"
}
layer {
  name: "conv2-pointwise”
  type: "Convolution"
  bottom: "relu2-depthwise”
  top: "conv2-pointwise"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    pad: 0
    kernel_size: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "norm2-pointwise”
  type: "LRN"
  bottom: "conv2-pointwise"
  top: "norm2-pointwise”
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "relu2-pointwise”
  type: "ReLU"
  bottom: "conv2-pointwise"
  top: "conv3-pointwise"
}

layer {
  name: "conv3-depthwise”
  type: "Convolution"
  bottom: "relu2-pointwise”
  top: "conv3-depthwise"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 1
    pad: 0
    stride: 2
    kernel_size: 3
    group: 64
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0.1
    }
  }
}
layer {
  name: "norm3-depthwise”
  type: "LRN"
  bottom: "conv3-depthwise"
  top: "norm3-depthwise”
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "relu3-depthwise”
  type: "ReLU"
  bottom: "norm3-depthwise"
  top: "conv3-depthwise"
}
layer {
  name: "conv3-pointwise”
  type: "Convolution"
  bottom: "relu3-depthwise"
  top: "conv3-pointwise"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 0
    kernel_size: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "norm3-pointwise”
  type: "LRN"
  bottom: "conv3-pointwise"
  top: "norm3-pointwise”
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "relu3-pointwise”
  type: "ReLU"
  bottom: "norm3-pointwise"
  top: "conv3-pointwise"
}




layer {
  name: "conv4-depthwise”
  type: "Convolution"
  bottom: "relu3-pointwise”
  top: "conv4-depthwise"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 1
    pad: 0
    kernel_size: 3
    group: 128
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0.1
    }
  }
}
layer {
  name: "norm4-depthwise”
  type: "LRN"
  bottom: "conv4-depthwise"
  top: "norm4-depthwise”
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "relu4-depthwise”
  type: "ReLU"
  bottom: "norm4-depthwise"
  top: "conv4-depthwise"
}


layer {
  name: "conv4-pointwise”
  type: "Convolution"
  bottom: "relu2"
  top: "conv4-pointwise"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    pad: 0
    kernel_size: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "norm4-pointwise”
  type: "LRN"
  bottom: "conv4-pointwise"
  top: "norm4-pointwise”
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "relu4-pointwise”
  type: "ReLU"
  bottom: "norm4-pointwise"
  top: "conv4-pointwise"
}


layer {
  name: "pool5”
  type: "Pooling"
  bottom: "conv4-pointwise"
  top: "pool5”
  pooling_param {
    pool: AVE
    kernel_size: 7
    stride: 1
  }
}


layer {
  name: "fc6”
  type: "InnerProduct"
  bottom: "pool5"
  top: "fc6”
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 4
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "fc6"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "fc6”
  bottom: "label"
  top: "loss"
}